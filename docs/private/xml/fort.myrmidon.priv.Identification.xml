<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="fort::myrmidon::priv::Identification" name="Identification" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>An Identification relates TagID to an Ant</brief>
  <doc>An <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">Identification</ref> relates &amp;lt;TagID&amp;gt; to an <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref>.
<ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">Identification</ref> can be bounded in time through their <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::Start">Start</ref>
and <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::End">End</ref> <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer::Ptr">fort::myrmidon::priv::FramePointer::Ptr</ref>. An empty pointer indicates an
abscence of boundary.

<ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">Identification</ref> also contains geometric information about how a
physical tag is positionned on the ant. The <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::SetTagPosition">SetTagPosition</ref> can be
used to define the position of the Tag in the actual Ant reference
frame. The Helper method <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::ComputeTagToAntTransform">ComputeTagToAntTransform</ref> can be used to
compute these values from a Ant head / tail position and a Tag
position in any reference (but they have to be the same for both
ofc).

TODO: It seems weird that sometimes we use <ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">fort::myrmidon::priv::Isometry2D</ref>, and some
time pair of point and sometimes translation and orientation. A
bbit of uniformity would help.</doc>
  <class name="Accessor" ref="fort::myrmidon::priv::Identification::Accessor#fort::myrmidon::priv::Identification::Accessor" />
  <typedef id="fort::myrmidon::priv::Identification::List" name="List">
    <brief>A List of Identification</brief>
    <type name="std::vector&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;, std::allocator&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; &gt; &gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::Identification::Ptr" name="Ptr">
    <brief>A Pointer to an Identification</brief>
    <type name="std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;" />
  </typedef>
  <method id="fort::myrmidon::priv::Identification::AntToTagTransform" name="AntToTagTransform">
    <brief>Gets the transformation from the Ant reference to the Tag reference</brief>
    <doc>Given a tag position tp and angle ta in image space, one would
be able to get the actual position and orientation of the ant
in image space by computing : `Isometry2D(tp,ta) *
AntToTagTransform()`, and using <ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D::angle">fort::myrmidon::priv::Isometry2D::angle</ref> and
<ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D::translation">fort::myrmidon::priv::Isometry2D::translation</ref>.</doc>
    <return>
      <type name="Isometry2Dd" qualifier=" const &amp;" ref="fort::myrmidon::priv#fort::myrmidon::priv::Isometry2Dd" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::ComputeTagToAntTransform" name="ComputeTagToAntTransform" static="yes">
    <brief>Computes the TagToAntTransform</brief>
    <doc>Helper function to compute <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::TagPosition">fort::myrmidon::priv::Identification::TagPosition</ref> and <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::TagAngle">fort::myrmidon::priv::Identification::TagAngle</ref></doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Identification::ComputeTagToAntTransform::result" name="result">
      <doc>the result transform</doc>
      <type name="Isometry2Dd" qualifier=" &amp;" ref="fort::myrmidon::priv#fort::myrmidon::priv::Isometry2Dd" />
    </argument>
    <argument id="fort::myrmidon::priv::Identification::ComputeTagToAntTransform::tagPosition" name="tagPosition">
      <doc>the position to the tag in image space</doc>
      <type name="Eigen::Vector2d" qualifier=" const &amp;" />
    </argument>
    <argument id="fort::myrmidon::priv::Identification::ComputeTagToAntTransform::tagAngle" name="tagAngle">
      <doc>the orientation of the tag in image space</doc>
      <type builtin="yes" name="double" />
    </argument>
    <argument id="fort::myrmidon::priv::Identification::ComputeTagToAntTransform::head" name="head">
      <doc>the head of the <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> in image space</doc>
      <type name="Eigen::Vector2d" qualifier=" const &amp;" />
    </argument>
    <argument id="fort::myrmidon::priv::Identification::ComputeTagToAntTransform::tail" name="tail">
      <doc>the tail of the <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> in image space</doc>
      <type name="Eigen::Vector2d" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::End" name="End">
    <brief>Get the ending validity time</brief>
    <return>
      <type name="FramePointer::ConstPtr" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer::ConstPtr" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::ParentIdentifier" name="ParentIdentifier">
    <brief>Gets the parent Identifier</brief>
    <doc>Gets the parent <ref ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier">fort::myrmidon::priv::Identifier</ref>. It can throw
<ref ref="fort::myrmidon::priv::DeletedReference#fort::myrmidon::priv::DeletedReference">fort::myrmidon::priv::DeletedReference</ref> if by any bug the referenced object has been
destroyed.</doc>
    <return>
      <type name="IdentifierPtr" ref="fort::myrmidon::priv#fort::myrmidon::priv::IdentifierPtr" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::SetEnd" name="SetEnd">
    <brief>Sets the ending validity time for this Identification</brief>
    <doc>Sets the ending validity time for this <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::Identification">fort::myrmidon::priv::Identification::Identification</ref> and <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::Identification">fort::myrmidon::priv::Identification::Identification</ref>. This
methods will throw any <ref ref="fort::myrmidon::priv::OverlappingIdentification#fort::myrmidon::priv::OverlappingIdentification">fort::myrmidon::priv::OverlappingIdentification</ref> if such
modification will create any collision for the same &amp;lt;TagID&amp;gt; or
the same <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref>. In such a case the boundaries remain
unchanged.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Identification::SetEnd::end" name="end">
      <doc>the ending time, could be an empty pointer to remove
any boundary</doc>
      <type name="FramePointer::Ptr" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer::Ptr" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::SetStart" name="SetStart">
    <brief>Sets the starting validity time for this Identification</brief>
    <doc>Sets the starting validity time for this <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::Identification">fort::myrmidon::priv::Identification::Identification</ref> and <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::Identification">fort::myrmidon::priv::Identification::Identification</ref>. This
methods will throw any <ref ref="fort::myrmidon::priv::OverlappingIdentification#fort::myrmidon::priv::OverlappingIdentification">fort::myrmidon::priv::OverlappingIdentification</ref> if such
modification will create any collision for the same &amp;lt;TagID&amp;gt; or
the same <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref>. In such a case the boundaries remain
unchanged.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Identification::SetStart::start" name="start">
      <doc>the starting time, could be an empty pointer to remove
any boundary</doc>
      <type name="FramePointer::Ptr" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer::Ptr" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::SetTagPosition" name="SetTagPosition">
    <brief>Sets the Tag Position relative to the Ant</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Identification::SetTagPosition::position" name="position">
      <doc>the translation from the <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> origin to the Tag center.</doc>
      <type name="Eigen::Vector2d" qualifier=" const &amp;" />
    </argument>
    <argument id="fort::myrmidon::priv::Identification::SetTagPosition::angle" name="angle">
      <doc>the angle between the <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> and the tag.</doc>
      <type builtin="yes" name="double" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::SortAndCheckOverlap" name="SortAndCheckOverlap" static="yes">
    <brief>Sorts a list of identification and returns any overlap</brief>
    <return>
      <type name="std::pair&lt;__gnu_cxx::__normal_iterator&lt;const std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; *, std::vector&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;, std::allocator&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;const std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; *, std::vector&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;, std::allocator&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; &gt; &gt; &gt; &gt;" />
    </return>
    <argument id="fort::myrmidon::priv::Identification::SortAndCheckOverlap::begin" name="begin">
      <doc>an iterator to the start of the range</doc>
      <type name="std::vector&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;, std::allocator&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; &gt; &gt;::iterator" />
    </argument>
    <argument id="fort::myrmidon::priv::Identification::SortAndCheckOverlap::end" name="end">
      <doc>an iterator the end of the range</doc>
      <type name="std::vector&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;, std::allocator&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; &gt; &gt;::iterator" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::Start" name="Start">
    <brief>Gets the starting validity time</brief>
    <return>
      <type name="FramePointer::ConstPtr" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer::ConstPtr" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::TagAngle" name="TagAngle">
    <brief>Gets the tag rotation</brief>
    <return>
      <type builtin="yes" name="double" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::TagPosition" name="TagPosition">
    <brief>Gets the tag position in the Ant reference frame</brief>
    <return>
      <type name="Eigen::Vector2d" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::TagValue" name="TagValue">
    <brief>Gets the TagID of this Identification</brief>
    <return>
      <type name="uint32_t" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Identification::Target" name="Target">
    <brief>Gets the identified Ant</brief>
    <doc>Gets the identified <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref>. It can throw
<ref ref="fort::myrmidon::priv::DeletedReference#fort::myrmidon::priv::DeletedReference">fort::myrmidon::priv::DeletedReference</ref> if by any bug the referenced object has been
destroyed.</doc>
    <return>
      <type name="AntPtr" ref="fort::myrmidon::priv#fort::myrmidon::priv::AntPtr" />
    </return>
  </method>
  <method id="fort::myrmidon::priv::Identification::TargetsFrame" name="TargetsFrame">
    <brief>Tests if this identification targets a given point in time.</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fort::myrmidon::priv::Identification::TargetsFrame::frame" name="frame">
      <doc>the point in time to test for</doc>
      <type name="FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </method>
</class>
