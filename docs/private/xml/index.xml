<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <functiontemplate id="operator*" name="operator*">
    <brief>Applies the <ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">fort::myrmidon::priv::Isometry2D</ref> to a point.</brief>
    <doc>Note: this apply a point transformation. The vector represent a
point in a coordinate system, and not a direction. To transform a
vector please use i.rotation()*p

</doc>
    <return>
      <doc>a new point representing the tranformed point.</doc>
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </return>
    <argument id="operator*::a" name="a">
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" qualifier=" const &amp;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </argument>
    <argument id="operator*::b" name="b">
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" qualifier=" const &amp;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </argument>
    <templatetypeparameter id="operator*::T" name="T">
      <brief>the scalar type such as float or double</brief>
    </templatetypeparameter>
    <templatetypeparameter id="operator*::T" name="T">
      <brief>the scalar type such as float or double</brief>
    </templatetypeparameter>
  </functiontemplate>
  <functiontemplate id="operator*" name="operator*">
    <brief>Concatenates two <ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">fort::myrmidon::priv::Isometry2D</ref>
    </brief>
    <doc>Note that `a * b` could be different than `b * a` most of the time.

</doc>
    <return>
      <doc>the two concatened isometry &amp;lt;b&amp;gt;, then &amp;lt;a&amp;gt;, as an <ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">fort::myrmidon::priv::Isometry2D</ref></doc>
      <type name="Eigen::Matrix&lt;_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols&gt;" />
    </return>
    <argument id="operator*::i" name="i">
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" qualifier=" const &amp;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </argument>
    <argument id="operator*::p" name="p">
      <type name="Eigen::Matrix&lt;_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols&gt;" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="operator*::T" name="T">
      <brief>the scalar type to use, float or double</brief>
    </templatetypeparameter>
    <templatetypeparameter id="operator*::T" name="T">
      <brief>the scalar type to use, float or double</brief>
    </templatetypeparameter>
  </functiontemplate>
  <namespace name="fort" ref="fort#fort">
    <brief>the FORmidae Tracker namespace</brief>
    <namespace name="myrmidon" ref="fort::myrmidon#fort::myrmidon">
      <brief>the myrmidon API provides tracking analysis utilities</brief>
      <namespace name="pb" ref="fort::myrmidon::pb#fort::myrmidon::pb">
        <brief>The namespace for <ref ref="fort::myrmidon#fort::myrmidon">fort::myrmidon</ref> protobuf messages</brief>
        <class name="AntMetadata" ref="fort::myrmidon::pb::AntMetadata#fort::myrmidon::pb::AntMetadata">
          <brief>This message holds all metadata related to an <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref>
          </brief>
        </class>
        <class name="Experiment" ref="fort::myrmidon::pb::Experiment#fort::myrmidon::pb::Experiment">
          <brief>This message holds all data related to an <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">fort::myrmidon::priv::Experiment</ref>
          </brief>
        </class>
        <class name="FramePointer" ref="fort::myrmidon::pb::FramePointer#fort::myrmidon::pb::FramePointer">
          <brief>This message holds all data related to an <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref>
          </brief>
        </class>
        <class name="Identification" ref="fort::myrmidon::pb::Identification#fort::myrmidon::pb::Identification">
          <brief>This message holds all data related to an <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">fort::myrmidon::priv::Identification</ref>
          </brief>
        </class>
        <class name="TrackingDataDirectory" ref="fort::myrmidon::pb::TrackingDataDirectory#fort::myrmidon::pb::TrackingDataDirectory">
          <brief>This message holds all data related to an <ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">fort::myrmidon::priv::TrackingDataDirectory</ref>
          </brief>
        </class>
      </namespace>
      <namespace name="priv" ref="fort::myrmidon::priv#fort::myrmidon::priv">
        <brief>Private Interface for Ant metadata manipulation</brief>
        <class name="Ant" ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">
          <brief>The Object of Interest of any Experiment</brief>
          <class name="Accessor" ref="fort::myrmidon::priv::Ant::Accessor#fort::myrmidon::priv::Ant::Accessor">
            <brief>C++ shenanigans</brief>
          </class>
        </class>
        <classtemplate name="DeletedReference" ref="fort::myrmidon::priv::DeletedReference#fort::myrmidon::priv::DeletedReference">
          <brief>Exception for deleted reference</brief>
          <templatetypeparameter id="fort::myrmidon::priv::DeletedReference::T" name="T">
            <brief>the type of reference</brief>
          </templatetypeparameter>
        </classtemplate>
        <class name="Experiment" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">
          <brief>Entry point of the myrmidon private interface</brief>
        </class>
        <class name="ExperimentReadWriter" ref="fort::myrmidon::priv::ExperimentReadWriter#fort::myrmidon::priv::ExperimentReadWriter">
          <brief>A IO Abstraction to Read and Write an Experiment on the filesystem</brief>
        </class>
        <class name="FramePointer" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">
          <brief>Identifies an Experimental Point in Time</brief>
        </class>
        <class name="Identification" ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">
          <brief>An Identification relates TagID to an Ant</brief>
          <class name="Accessor" ref="fort::myrmidon::priv::Identification::Accessor#fort::myrmidon::priv::Identification::Accessor" />
        </class>
        <class name="Identifier" ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier">
          <brief>An Identifier identifies Ants through Identification</brief>
          <class name="Accessor" ref="fort::myrmidon::priv::Identifier::Accessor#fort::myrmidon::priv::Identifier::Accessor" />
          <class name="AlreadyExistingAnt" ref="fort::myrmidon::priv::Identifier::AlreadyExistingAnt#fort::myrmidon::priv::Identifier::AlreadyExistingAnt">
            <brief>An exeption when an Ant is already existing</brief>
          </class>
          <class name="UnmanagedAnt" ref="fort::myrmidon::priv::Identifier::UnmanagedAnt#fort::myrmidon::priv::Identifier::UnmanagedAnt">
            <brief>An exeption when an Ant is not managed by this Identifier</brief>
          </class>
          <class name="UnmanagedIdentification" ref="fort::myrmidon::priv::Identifier::UnmanagedIdentification#fort::myrmidon::priv::Identifier::UnmanagedIdentification">
            <brief>An exeption when an Identification is not managed by this Identifier</brief>
          </class>
          <class name="UnmanagedTag" ref="fort::myrmidon::priv::Identifier::UnmanagedTag#fort::myrmidon::priv::Identifier::UnmanagedTag">
            <brief>An exeption when a TagID is not managed by this Identifier</brief>
          </class>
        </class>
        <classtemplate name="Isometry2D" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">
          <brief>Represents a 2D isometric transformation</brief>
          <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T">
            <brief>the scalar type used to represent the transformation, either double or float</brief>
          </templatetypeparameter>
          <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T">
            <brief>the scalar type used to represent the transformation, either double or float</brief>
          </templatetypeparameter>
        </classtemplate>
        <class name="OverlappingIdentification" ref="fort::myrmidon::priv::OverlappingIdentification#fort::myrmidon::priv::OverlappingIdentification">
          <brief>An std::exception when tow Identification overlaps in time.</brief>
        </class>
        <class name="ProtobufReadWriter" ref="fort::myrmidon::priv::ProtobufReadWriter#fort::myrmidon::priv::ProtobufReadWriter">
          <brief>Saves Experiment using protocol buffer</brief>
        </class>
        <class name="TrackingDataDirectory" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">
          <brief>Reference to a directory containing tracking data</brief>
        </class>
      </namespace>
    </namespace>
  </namespace>
  <class name="IdentificationUTest" ref="IdentificationUTest#IdentificationUTest" />
  <class name="NotYetImplemented" ref="NotYetImplemented#NotYetImplemented" />
  <function id="operator!=" name="operator!=">
    <brief>Allows FramePointer to be differenciated</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator!=::a" name="a">
      <doc>the first <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref></doc>
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
    <argument id="operator!=::b" name="b">
      <doc>the first <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref></doc>
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <function id="operator&lt;" name="operator&lt;">
    <brief>namespace fort</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator&lt;::a" name="a">
      <type name="fort::myrmidon::priv::TrackingDataDirectory" qualifier=" const &amp;" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory" />
    </argument>
    <argument id="operator&lt;::b" name="b">
      <type name="fort::myrmidon::priv::TrackingDataDirectory" qualifier=" const &amp;" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory" />
    </argument>
  </function>
  <function id="operator&lt;" name="operator&lt;">
    <brief>Allows FramePointer to be strictly ordered</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator&lt;::a" name="a">
      <doc>the first <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref></doc>
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
    <argument id="operator&lt;::b" name="b">
      <doc>the first <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref></doc>
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <function id="operator&lt;&lt;" name="operator&lt;&lt;">
    <brief>namespace fort</brief>
    <return>
      <type name="std::ostream" qualifier=" &amp;" />
    </return>
    <argument id="operator&lt;&lt;::out" name="out">
      <type name="std::ostream" qualifier=" &amp;" />
    </argument>
    <argument id="operator&lt;&lt;::t" name="t">
      <type name="fort::myrmidon::priv::Experiment::TagFamily" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::TagFamily" />
    </argument>
  </function>
  <function id="operator&lt;&lt;" name="operator&lt;&lt;">
    <brief>Formats a FramePointer</brief>
    <return>
      <type name="std::ostream" qualifier=" &amp;" />
    </return>
    <argument id="operator&lt;&lt;::out" name="out">
      <doc>the std::ostream to format to</doc>
      <type name="std::ostream" qualifier=" &amp;" />
    </argument>
    <argument id="operator&lt;&lt;::p" name="p">
      <doc>the <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref> to format</doc>
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <function id="operator&lt;&lt;" name="operator&lt;&lt;">
    <brief>Formats an Identification to an std::ostream</brief>
    <return>
      <type name="std::ostream" qualifier=" &amp;" />
    </return>
    <argument id="operator&lt;&lt;::out" name="out">
      <doc>the stream to format to</doc>
      <type name="std::ostream" qualifier=" &amp;" />
    </argument>
    <argument id="operator&lt;&lt;::a" name="a">
      <doc>the <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">fort::myrmidon::priv::Identification</ref> to format</doc>
      <type name="fort::myrmidon::priv::Identification" qualifier=" const &amp;" ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification" />
    </argument>
  </function>
  <function id="operator&lt;=" name="operator&lt;=">
    <brief>Allows FramePointer to be weakly ordered</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator&lt;=::a" name="a">
      <doc>the first <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref></doc>
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
    <argument id="operator&lt;=::b" name="b">
      <doc>the first <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref></doc>
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <report name="Documentation generator" ref="report" />
</index>
