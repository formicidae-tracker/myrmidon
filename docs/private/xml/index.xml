<?xml version='1.0' encoding='utf-8'?>
<index xmlns="http://jessevdk.github.com/cldoc/1.0">
  <functiontemplate id="operator*" name="operator*">
    <brief>namespace fort</brief>
    <return>
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </return>
    <argument id="operator*::a" name="a">
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" qualifier=" const &amp;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </argument>
    <argument id="operator*::b" name="b">
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" qualifier=" const &amp;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </argument>
    <templatetypeparameter id="operator*::T" name="T" />
    <templatetypeparameter id="operator*::T" name="T" />
  </functiontemplate>
  <functiontemplate id="operator*" name="operator*">
    <brief>namespace fort</brief>
    <return>
      <type name="Eigen::Matrix&lt;_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols&gt;" />
    </return>
    <argument id="operator*::i" name="i">
      <type name="fort::myrmidon::priv::Isometry2D&lt;T&gt;" qualifier=" const &amp;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </argument>
    <argument id="operator*::p" name="p">
      <type name="Eigen::Matrix&lt;_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols&gt;" qualifier=" const &amp;" />
    </argument>
    <templatetypeparameter id="operator*::T" name="T" />
    <templatetypeparameter id="operator*::T" name="T" />
  </functiontemplate>
  <namespace name="fort" ref="fort#fort">
    <brief>the fort global namespace</brief>
    <namespace name="myrmidon" ref="fort::myrmidon#fort::myrmidon">
      <brief>the myrmidon namespace</brief>
      <namespace name="pb" ref="fort::myrmidon::pb#fort::myrmidon::pb">
        <class name="AntMetadata" ref="fort::myrmidon::pb::AntMetadata#fort::myrmidon::pb::AntMetadata" />
        <class name="Experiment" ref="fort::myrmidon::pb::Experiment#fort::myrmidon::pb::Experiment" />
        <class name="FramePointer" ref="fort::myrmidon::pb::FramePointer#fort::myrmidon::pb::FramePointer" />
        <class name="Identification" ref="fort::myrmidon::pb::Identification#fort::myrmidon::pb::Identification" />
        <class name="TrackingDataDirectory" ref="fort::myrmidon::pb::TrackingDataDirectory#fort::myrmidon::pb::TrackingDataDirectory" />
      </namespace>
      <namespace name="priv" ref="fort::myrmidon::priv#fort::myrmidon::priv">
        <brief>the private implemenation namespace</brief>
        <class name="Ant" ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">
          <class name="Accessor" ref="fort::myrmidon::priv::Ant::Accessor#fort::myrmidon::priv::Ant::Accessor" />
        </class>
        <classtemplate name="DeletedReference" ref="fort::myrmidon::priv::DeletedReference#fort::myrmidon::priv::DeletedReference">
          <templatetypeparameter id="fort::myrmidon::priv::DeletedReference::T" name="T" />
        </classtemplate>
        <class name="Experiment" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment" />
        <class name="ExperimentReadWriter" ref="fort::myrmidon::priv::ExperimentReadWriter#fort::myrmidon::priv::ExperimentReadWriter" />
        <class name="FramePointer" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
        <class name="Identification" ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">
          <class name="Accessor" ref="fort::myrmidon::priv::Identification::Accessor#fort::myrmidon::priv::Identification::Accessor" />
        </class>
        <class name="Identifier" ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier">
          <brief>An Identifier identifies Ants through Identifications</brief>
          <class name="Accessor" ref="fort::myrmidon::priv::Identifier::Accessor#fort::myrmidon::priv::Identifier::Accessor" />
          <class name="AlreadyExistingAnt" ref="fort::myrmidon::priv::Identifier::AlreadyExistingAnt#fort::myrmidon::priv::Identifier::AlreadyExistingAnt" />
          <class name="UnmanagedAnt" ref="fort::myrmidon::priv::Identifier::UnmanagedAnt#fort::myrmidon::priv::Identifier::UnmanagedAnt" />
          <class name="UnmanagedIdentification" ref="fort::myrmidon::priv::Identifier::UnmanagedIdentification#fort::myrmidon::priv::Identifier::UnmanagedIdentification" />
          <class name="UnmanagedTag" ref="fort::myrmidon::priv::Identifier::UnmanagedTag#fort::myrmidon::priv::Identifier::UnmanagedTag" />
        </class>
        <classtemplate name="Isometry2D" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">
          <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T" />
          <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T" />
        </classtemplate>
        <class name="OverlappingIdentification" ref="fort::myrmidon::priv::OverlappingIdentification#fort::myrmidon::priv::OverlappingIdentification" />
        <class name="ProtobufReadWriter" ref="fort::myrmidon::priv::ProtobufReadWriter#fort::myrmidon::priv::ProtobufReadWriter" />
        <class name="TrackingDataDirectory" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory" />
      </namespace>
    </namespace>
  </namespace>
  <class name="IdentificationUTest" ref="IdentificationUTest#IdentificationUTest" />
  <class name="NotYetImplemented" ref="NotYetImplemented#NotYetImplemented" />
  <function id="operator!=" name="operator!=">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator!=::a" name="a">
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
    <argument id="operator!=::b" name="b">
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <function id="operator&lt;" name="operator&lt;">
    <brief>namespace fort</brief>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator&lt;::a" name="a">
      <type name="fort::myrmidon::priv::TrackingDataDirectory" qualifier=" const &amp;" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory" />
    </argument>
    <argument id="operator&lt;::b" name="b">
      <type name="fort::myrmidon::priv::TrackingDataDirectory" qualifier=" const &amp;" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory" />
    </argument>
  </function>
  <function id="operator&lt;" name="operator&lt;">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator&lt;::a" name="a">
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
    <argument id="operator&lt;::b" name="b">
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <function id="operator&lt;&lt;" name="operator&lt;&lt;">
    <brief>namespace fort</brief>
    <return>
      <type name="std::ostream" qualifier=" &amp;" />
    </return>
    <argument id="operator&lt;&lt;::out" name="out">
      <type name="std::ostream" qualifier=" &amp;" />
    </argument>
    <argument id="operator&lt;&lt;::t" name="t">
      <type name="fort::myrmidon::priv::Experiment::TagFamily" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::TagFamily" />
    </argument>
  </function>
  <function id="operator&lt;&lt;" name="operator&lt;&lt;">
    <return>
      <type name="std::ostream" qualifier=" &amp;" />
    </return>
    <argument id="operator&lt;&lt;::out" name="out">
      <type name="std::ostream" qualifier=" &amp;" />
    </argument>
    <argument id="operator&lt;&lt;::p" name="p">
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <function id="operator&lt;&lt;" name="operator&lt;&lt;">
    <brief>namespace fort</brief>
    <return>
      <type name="std::ostream" qualifier=" &amp;" />
    </return>
    <argument id="operator&lt;&lt;::out" name="out">
      <type name="std::ostream" qualifier=" &amp;" />
    </argument>
    <argument id="operator&lt;&lt;::a" name="a">
      <type name="fort::myrmidon::priv::Identification" qualifier=" const &amp;" ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification" />
    </argument>
  </function>
  <function id="operator&lt;=" name="operator&lt;=">
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="operator&lt;=::a" name="a">
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
    <argument id="operator&lt;=::b" name="b">
      <type name="fort::myrmidon::priv::FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </function>
  <report name="Documentation generator" ref="report" />
</index>
