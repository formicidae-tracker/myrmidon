<?xml version='1.0' encoding='utf-8'?>
<class abstract="true" id="fort::myrmidon::priv::Experiment" name="Experiment" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Entry point of the myrmidon private interface</brief>
  <doc>An <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">Experiment</ref> is responsible to hold the links to the
<ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">fort::myrmidon::priv::TrackingDataDirectory</ref> and to provide the <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Identifier">Identifier</ref> for an
actual Ant colony.

It also provide the interface to read/write <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">Experiment</ref> to
the filesystem.

user may only to initialize a single object of this type, as
<ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> will be only uniquely identified by theyr
&amp;lt;myrmidon::Ant::ID&amp;gt; when they originate from the same
<ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Identifier">Identifier</ref>. Anyway dataset are very large and we should not try
to anlayse several of them in the same program.</doc>
  <enum class="yes" id="fort::myrmidon::priv::Experiment::TagFamily" name="TagFamily">
    <brief>The AprilTag families supported by the FORT project.</brief>
    <doc>The AprilTag families supported by the FORT project.
TODO: should it move to fort hermes ?</doc>
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Tag36h11" name="Tag36h11" value="0" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Tag36h10" name="Tag36h10" value="1" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Tag36ARTag" name="Tag36ARTag" value="2" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Tag16h5" name="Tag16h5" value="3" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Tag25h9" name="Tag25h9" value="4" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Circle21h7" name="Circle21h7" value="5" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Circle49h12" name="Circle49h12" value="6" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Custom48h12" name="Custom48h12" value="7" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Standard41h12" name="Standard41h12" value="8" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Standard52h13" name="Standard52h13" value="9" />
    <enumvalue id="fort::myrmidon::priv::Experiment::TagFamily::Unset" name="Unset" value="10" />
  </enum>
  <typedef id="fort::myrmidon::priv::Experiment::Ptr" name="Ptr">
    <brief>A Pointer to an Experiment.</brief>
    <type name="std::unique_ptr&lt;fort::myrmidon::priv::Experiment, std::default_delete&lt;fort::myrmidon::priv::Experiment&gt; &gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::Experiment::TrackingDataDirectoryByPath" name="TrackingDataDirectoryByPath">
    <brief>Maps <ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">fort::myrmidon::priv::TrackingDataDirectory</ref> by their path</brief>
    <type name="std::unordered_map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, fort::myrmidon::priv::TrackingDataDirectory, std::hash&lt;std::__cxx11::string&gt;, std::equal_to&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;const std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, fort::myrmidon::priv::TrackingDataDirectory&gt; &gt; &gt;" />
  </typedef>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::AbsolutePath" name="AbsolutePath">
    <brief>The absolute path of the Experiment</brief>
    <return>
      <type name="std::filesystem::__cxx11::path" qualifier=" const &amp;" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::AddTrackingDataDirectory" name="AddTrackingDataDirectory">
    <brief>Adds a new TrackingDataDirectory</brief>
    <doc>This methods adds the <ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">fort::myrmidon::priv::TrackingDataDirectory</ref> only if none of
its Frame overlaps in time with the <ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">fort::myrmidon::priv::TrackingDataDirectory</ref>
already referenced by this <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">fort::myrmidon::priv::Experiment</ref>.

TODO: how to treat the case of multiple box experiment? In that
case the frame will overlap. But its the same colony. But we
have now two reference systems.</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::AddTrackingDataDirectory::tdd" name="tdd">
      <doc>the new <ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">fort::myrmidon::priv::TrackingDataDirectory</ref> to add</doc>
      <type name="TrackingDataDirectory" qualifier=" const &amp;" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Author" name="Author">
    <return>
      <type name="std::__cxx11::string" qualifier=" const &amp;" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Basedir" name="Basedir">
    <brief>The parent dir of the Experiment</brief>
    <doc>Since <ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">fort::myrmidon::priv::TrackingDataDirectory</ref> are pointer to the actual data
directory on the filesystem, any Path is relative to this
<ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Basedir">Basedir</ref>
</doc>
    <return>
      <doc>a fs::path to the base directory of this
<ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">fort::myrmidon::priv::Experiment</ref>.</doc>
      <type name="std::filesystem::__cxx11::path" qualifier=" const &amp;" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Comment" name="Comment">
    <return>
      <type name="std::__cxx11::string" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="fort::myrmidon::priv::Experiment::ConstIdentifier" name="ConstIdentifier">
    <brief>ConstAccessor to the underlying Identifier</brief>
    <return>
      <type name="Identifier" qualifier=" const &amp;" ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Create" name="Create" static="yes">
    <brief>Creates a new <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> and <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> given a fs::path</brief>
    <doc>Creates a new <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> and <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> associated with the
&amp;lt;fs::path&amp;gt;. **This function does not create any file on
itself.** Use either <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::NewFile">fort::myrmidon::priv::Experiment::NewFile</ref> or <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Save">fort::myrmidon::priv::Experiment::Save</ref>
</doc>
    <return>
      <doc>a <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Ptr">fort::myrmidon::priv::Experiment::Ptr</ref> to the empty <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> and <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref></doc>
      <type name="Ptr" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Ptr" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::Create::filename" name="filename">
      <doc>the fs::path to the ".myrmidon" file</doc>
      <type name="std::filesystem::__cxx11::path" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Family" name="Family">
    <return>
      <type name="TagFamily" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::TagFamily" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::FreeRangeContaining" name="FreeRangeContaining">
    <brief>Found the largest time range where a &amp;lt;TagID&amp;gt; is unused.</brief>
    <doc>Try to find the largest range where the &amp;lt;t&amp;gt; is not used,
containing the Frame <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::FreeRangeContaining::f">f</ref>. If the tag is actually used at this
frame returns false. Otherwise returns true and sets <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::FreeRangeContaining::start">start</ref>
and <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::FreeRangeContaining::end">end</ref> accordingly. Note that a reset pointer means that the
tag was not used before or after t.

TODO: this logic clearly is owned by the Identifier, move it
here.</doc>
    <return>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::FreeRangeContaining::start" name="start">
      <doc>sets the first frame where the tag is unused, or an
empty pointer if the tag isn't used before <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::FreeRangeContaining::f">f</ref></doc>
      <type name="FramePointerPtr" qualifier=" &amp;" ref="fort::myrmidon::priv#fort::myrmidon::priv::FramePointerPtr" />
    </argument>
    <argument id="fort::myrmidon::priv::Experiment::FreeRangeContaining::end" name="end">
      <doc>set the last frame where the tag is unused, or an
empty pointer if the tag isn't used after <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::FreeRangeContaining::f">f</ref></doc>
      <type name="FramePointerPtr" qualifier=" &amp;" ref="fort::myrmidon::priv#fort::myrmidon::priv::FramePointerPtr" />
    </argument>
    <argument id="fort::myrmidon::priv::Experiment::FreeRangeContaining::tag" name="tag">
      <doc>the &amp;lt;TagID&amp;gt; to inquire for</doc>
      <type name="uint32_t" />
    </argument>
    <argument id="fort::myrmidon::priv::Experiment::FreeRangeContaining::f" name="f">
      <doc>the <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">fort::myrmidon::priv::FramePointer</ref> designating the point in time we want a free range.</doc>
      <type name="FramePointer" qualifier=" const &amp;" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer" />
    </argument>
  </method>
  <method id="fort::myrmidon::priv::Experiment::Identifier" name="Identifier">
    <brief>Accessor to the underlying Identifier</brief>
    <return>
      <type name="Identifier" qualifier=" &amp;" ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Name" name="Name">
    <return>
      <type name="std::__cxx11::string" qualifier=" const &amp;" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::NewFile" name="NewFile" static="yes">
    <brief>Creates a new <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> and <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> on the filesystem.</brief>
    <doc>Creates a new experiment and save it on a new file.
TODO: Is it too much. mconsider removing it.
</doc>
    <return>
      <doc>a <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Ptr">fort::myrmidon::priv::Experiment::Ptr</ref> to the empty <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> and <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref></doc>
      <type name="Ptr" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Ptr" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::NewFile::filename" name="filename">
      <doc>the fs::path to the ".myrmidon" file</doc>
      <type name="std::filesystem::__cxx11::path" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Open" name="Open" static="yes">
    <brief>Opens an existing experiment given its fs::path</brief>
    <return>
      <type name="Ptr" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Ptr" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::Open::filename" name="filename">
      <doc>the fs::path to the ".myrmidon" file</doc>
      <type name="std::filesystem::__cxx11::path" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::RemoveTrackingDataDirectory" name="RemoveTrackingDataDirectory">
    <brief>Removes a TrackingDataDirectory</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::RemoveTrackingDataDirectory::path" name="path">
      <doc>relative path to the directory</doc>
      <type name="std::filesystem::__cxx11::path" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Save" name="Save">
    <brief>Saves te Experiment to the filesystem</brief>
    <doc>Saves the <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> and <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Experiment">fort::myrmidon::priv::Experiment::Experiment</ref> to the filesystem. It consists only of
lightweight metadata of each Ants, Identification, Measurement
shapes. The actual tracking data is kept in the actual
directory referred byt the TrackingDatadirectory.

Saves the <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">fort::myrmidon::priv::Experiment</ref> data to the filesystem</doc>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::Save::filename" name="filename">
      <doc>the path to save too</doc>
      <type name="std::filesystem::__cxx11::path" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::SetAuthor" name="SetAuthor">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::SetAuthor::author" name="author">
      <type name="std::__cxx11::string" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::SetComment" name="SetComment">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::SetComment::comment" name="comment">
      <type name="std::__cxx11::string" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::SetFamily" name="SetFamily">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::SetFamily::tf" name="tf">
      <type name="TagFamily" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::TagFamily" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::SetName" name="SetName">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::SetName::name" name="name">
      <type name="std::__cxx11::string" qualifier=" const &amp;" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::SetThreshold" name="SetThreshold">
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="fort::myrmidon::priv::Experiment::SetThreshold::th" name="th">
      <type name="uint8_t" />
    </argument>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::Threshold" name="Threshold">
    <return>
      <type name="uint8_t" />
    </return>
  </method>
  <method abstract="yes" id="fort::myrmidon::priv::Experiment::TrackingDataDirectories" name="TrackingDataDirectories">
    <brief>Gets the TrackingDataDirectory related to this Experiment</brief>
    <return>
      <type name="TrackingDataDirectoryByPath" qualifier=" const &amp;" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::TrackingDataDirectoryByPath" />
    </return>
  </method>
</class>
