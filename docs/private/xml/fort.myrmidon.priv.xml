<?xml version='1.0' encoding='utf-8'?>
<namespace id="fort::myrmidon::priv" name="priv" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Private Interface for Ant metadata manipulation</brief>
  <doc>This namespace contains all code base for the creation, edition and
computation for Ant tracking metadata.

*This interface is not aimed to be binary stable at all, as user shoudl
not link directly against it. All symbols should not be considered
publically available, and binary compatibility could be broke between
patch version.*

The main entry point for this library is through an <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">Experiment</ref>,
representing a collection of actual tracking experiment for a single
Ant colony. This <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">Experiment</ref> holds a collection of relative pointers
to at least one <ref ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">TrackingDataDirectory</ref> containing the pristine
tracking data from an actual experiment.

The main object of study is an <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">Ant</ref>. The collection of <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">Ant</ref> in an
<ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">Experiment</ref> is managed by an <ref ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier">Identifier</ref> who is responsible of their
creation, deletion and the management of their respective
<ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">Identification</ref>.</doc>
  <class name="Ant" ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">
    <brief>The Object of Interest of any Experiment</brief>
  </class>
  <classtemplate name="DeletedReference" ref="fort::myrmidon::priv::DeletedReference#fort::myrmidon::priv::DeletedReference">
    <brief>Exception for deleted reference</brief>
    <templatetypeparameter id="fort::myrmidon::priv::DeletedReference::T" name="T">
      <brief>the type of reference</brief>
    </templatetypeparameter>
  </classtemplate>
  <class name="Experiment" ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment">
    <brief>Entry point of the myrmidon private interface</brief>
  </class>
  <class name="ExperimentReadWriter" ref="fort::myrmidon::priv::ExperimentReadWriter#fort::myrmidon::priv::ExperimentReadWriter">
    <brief>A IO Abstraction to Read and Write an Experiment on the filesystem</brief>
  </class>
  <class name="FramePointer" ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer">
    <brief>Identifies an Experimental Point in Time</brief>
  </class>
  <class name="Identification" ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">
    <brief>An Identification relates TagID to an Ant</brief>
  </class>
  <class name="Identifier" ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier">
    <brief>An Identifier identifies Ants through Identification</brief>
  </class>
  <classtemplate name="Isometry2D" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">
    <brief>Represents a 2D isometric transformation</brief>
    <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T">
      <brief>the scalar type used to represent the transformation, either double or float</brief>
    </templatetypeparameter>
    <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T">
      <brief>the scalar type used to represent the transformation, either double or float</brief>
    </templatetypeparameter>
  </classtemplate>
  <class name="OverlappingIdentification" ref="fort::myrmidon::priv::OverlappingIdentification#fort::myrmidon::priv::OverlappingIdentification">
    <brief>An std::exception when tow Identification overlaps in time.</brief>
  </class>
  <class name="ProtobufReadWriter" ref="fort::myrmidon::priv::ProtobufReadWriter#fort::myrmidon::priv::ProtobufReadWriter">
    <brief>Saves Experiment using protocol buffer</brief>
  </class>
  <class name="TrackingDataDirectory" ref="fort::myrmidon::priv::TrackingDataDirectory#fort::myrmidon::priv::TrackingDataDirectory">
    <brief>Reference to a directory containing tracking data</brief>
  </class>
  <typedef id="fort::myrmidon::priv::AntByID" name="AntByID">
    <brief>A Map of <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> identified by their <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant::ID">fort::myrmidon::priv::Ant::ID</ref>
    </brief>
    <type name="std::unordered_map&lt;unsigned int, std::shared_ptr&lt;fort::myrmidon::priv::Ant&gt;, std::hash&lt;unsigned int&gt;, std::equal_to&lt;unsigned int&gt;, std::allocator&lt;std::pair&lt;const unsigned int, std::shared_ptr&lt;fort::myrmidon::priv::Ant&gt; &gt; &gt; &gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::AntPtr" name="AntPtr">
    <brief>Forward decalation for an <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant::Ptr">fort::myrmidon::priv::Ant::Ptr</ref>
    </brief>
    <type name="std::shared_ptr&lt;fort::myrmidon::priv::Ant&gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::ExperimentPtr" name="ExperimentPtr">
    <brief>Forward decalation for an <ref ref="fort::myrmidon::priv::Experiment#fort::myrmidon::priv::Experiment::Ptr">fort::myrmidon::priv::Experiment::Ptr</ref>
    </brief>
    <type name="std::unique_ptr&lt;fort::myrmidon::priv::Experiment, std::default_delete&lt;fort::myrmidon::priv::Experiment&gt; &gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::FramePointerPtr" name="FramePointerPtr">
    <brief>Forward decalation for an <ref ref="fort::myrmidon::priv::FramePointer#fort::myrmidon::priv::FramePointer::Ptr">fort::myrmidon::priv::FramePointer::Ptr</ref>
    </brief>
    <type name="std::shared_ptr&lt;const fort::myrmidon::priv::FramePointer&gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::IdentificationList" name="IdentificationList">
    <brief>A List of <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification">fort::myrmidon::priv::Identification</ref>
    </brief>
    <type name="std::vector&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;, std::allocator&lt;std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt; &gt; &gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::IdentificationPtr" name="IdentificationPtr">
    <brief>Forward decalation for an <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::Ptr">fort::myrmidon::priv::Identification::Ptr</ref>
    </brief>
    <type name="std::shared_ptr&lt;fort::myrmidon::priv::Identification&gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::IdentifierPtr" name="IdentifierPtr">
    <brief>Forward decalation for an <ref ref="fort::myrmidon::priv::Identifier#fort::myrmidon::priv::Identifier::Ptr">fort::myrmidon::priv::Identifier::Ptr</ref>
    </brief>
    <type name="std::shared_ptr&lt;fort::myrmidon::priv::Identifier&gt;" />
  </typedef>
  <typedef id="fort::myrmidon::priv::Isometry2Dd" name="Isometry2Dd">
    <brief>An alias for &amp;lt;Isometry2D&lt;double&amp;gt;&gt;</brief>
    <type name="Isometry2D&lt;double&gt;" />
  </typedef>
</namespace>
