<?xml version='1.0' encoding='utf-8'?>
<classtemplate id="fort::myrmidon::priv::Isometry2D" name="Isometry2D" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <brief>Represents a 2D isometric transformation</brief>
  <doc>Represents 2D isometry using a homogenous matrices representation,
defined by an angle and a translation.

<ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D::inverse">inverse</ref> Could be used to get the inverse() transformation and the
<ref ref="index#operator*">operator*</ref> and <ref ref="index#operator*">operator*</ref> could be used to concatenate &amp;lt;isometry2d&amp;gt; or to apply
the transformation to a 2D point.


An Isometry2D could be used to defines the transformation from a 2D
reference to another. whihc is useful to compute <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> to <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref>
Interaction or to get the <ref ref="fort::myrmidon::priv::Ant#fort::myrmidon::priv::Ant">fort::myrmidon::priv::Ant</ref> reference system from a tag
reference system through the <ref ref="fort::myrmidon::priv::Identification#fort::myrmidon::priv::Identification::AntToTagTransform">fort::myrmidon::priv::Identification::AntToTagTransform</ref>.</doc>
  <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T">
    <brief>the scalar type used to represent the transformation, either double or float</brief>
  </templatetypeparameter>
  <templatetypeparameter id="fort::myrmidon::priv::Isometry2D::T" name="T">
    <brief>the scalar type used to represent the transformation, either double or float</brief>
  </templatetypeparameter>
  <constructor id="fort::myrmidon::priv::Isometry2D::Isometry2D&lt;T&gt;" name="Isometry2D&lt;T&gt;">
    <brief>Undefined default constructor.</brief>
    <doc>The isometry is undefined.</doc>
  </constructor>
  <constructor id="fort::myrmidon::priv::Isometry2D::Isometry2D&lt;T&gt;" name="Isometry2D&lt;T&gt;">
    <brief>Defines an Isometry2d</brief>
    <argument id="fort::myrmidon::priv::Isometry2D::Isometry2D&lt;T&gt;::angle" name="angle">
      <type name="T" />
    </argument>
    <argument id="fort::myrmidon::priv::Isometry2D::Isometry2D&lt;T&gt;::translation" name="translation">
      <type name="Eigen::Matrix&lt;_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols&gt;" qualifier=" const &amp;" />
    </argument>
  </constructor>
  <method id="fort::myrmidon::priv::Isometry2D::rotation" name="rotation">
    <brief>gets the rotation part if the transformation</brief>
    <return>
      <doc>the rotation part of the isometry</doc>
      <type name="Eigen::Rotation2D&lt;_Scalar&gt;" />
    </return>
  </method>
  <method id="fort::myrmidon::priv::Isometry2D::angle" name="angle">
    <brief>gets the rotation angle in radian</brief>
    <return>
      <doc>the rotation angle in radian</doc>
      <type name="T" />
    </return>
  </method>
  <method id="fort::myrmidon::priv::Isometry2D::translation" name="translation">
    <brief>gets the translation part of the isometry</brief>
    <return>
      <doc>the translation part of the isometry</doc>
      <type name="Eigen::Matrix&lt;_Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols&gt;" qualifier=" const &amp;" />
    </return>
  </method>
  <method id="fort::myrmidon::priv::Isometry2D::inverse" name="inverse">
    <brief>inverses the isometry</brief>
    <return>
      <doc>a new <ref ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D">fort::myrmidon::priv::Isometry2D</ref> representing the inverse transformation</doc>
      <type name="Isometry2D&lt;T&gt;" ref="fort::myrmidon::priv::Isometry2D#fort::myrmidon::priv::Isometry2D" />
    </return>
  </method>
</classtemplate>
